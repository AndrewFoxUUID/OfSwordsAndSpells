[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=84]
resource_local_to_scene = true
code = "shader_type canvas_item;

const vec4 original_light_gauntlet = vec4(0.847059, 0.596078, 0.301961, 1.0);
const vec4 original_gauntlet = vec4(0.82, 0.47, 0.23, 1.00);
const vec4 original_dark_gauntlet = vec4(0.91, 0.76, 0.44, 1.00);
const vec4 original_gauntlet_flair = vec4(0.96, 0.93, 0.75, 1.00);

uniform vec4 light_gauntlet : hint_color = vec4(0.85, 0.60, 0.30, 1.00);
uniform vec4 gauntlet : hint_color = vec4(0.82, 0.47, 0.23, 1.00);
uniform vec4 dark_gauntlet : hint_color = vec4(0.91, 0.76, 0.44, 1.00);
uniform vec4 gauntlet_flair : hint_color = vec4(0.96, 0.93, 0.75, 1.00);

bool color_equals(vec4 c1, vec4 c2) {
	return abs(c1.r - c2.r) < 0.02 && abs(c1.g - c2.g) < 0.02 && abs(c1.b - c2.b) < 0.02 && abs(c1.a - c2.a) < 0.02;
}

void fragment() {
	vec4 current_color = texture(TEXTURE, UV);
	
	if (color_equals(current_color, original_light_gauntlet)) {
		COLOR = light_gauntlet;
	} else if (color_equals(current_color, original_gauntlet)) {
		COLOR = gauntlet;
	} else if (color_equals(current_color, original_dark_gauntlet)) {
		COLOR = dark_gauntlet;
	} else if (color_equals(current_color, original_gauntlet_flair)) {
		COLOR = gauntlet_flair;
	} else {
		COLOR = current_color;
	}
}"

[resource]
resource_local_to_scene = true
shader = SubResource( 84 )
shader_param/light_gauntlet = Color( 0.85, 0.6, 0.3, 1 )
shader_param/gauntlet = Color( 0.82, 0.47, 0.23, 1 )
shader_param/dark_gauntlet = Color( 0.91, 0.76, 0.44, 1 )
shader_param/gauntlet_flair = Color( 0.96, 0.93, 0.75, 1 )
